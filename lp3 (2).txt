****************************image processing****************************************************************

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to display an image in Jupyter Notebook
def display_image(image, title="Image"):
    plt.imshow(image, cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.show()

# Read the image in grayscale
img = cv2.imread('Ferrari.jpg')
display_image(img, "Original")

cropped_image = img[300:1300, 200:2000]
display_image(cropped_image, "Cropped Image")

down_points = (300, 200)
resized_down = cv2.resize(img, down_points, interpolation=cv2.INTER_LINEAR)
up_points = (600, 400)
resized_up = cv2.resize(img, up_points, interpolation=cv2.INTER_LINEAR)
display_image(resized_down, 'Resized Down')
display_image(resized_up, 'Resized Up')



src = cv2.imread("Ferrari.jpg", cv2.IMREAD_GRAYSCALE)
_, dst_binary = cv2.threshold(src, 0, 255, cv2.THRESH_BINARY)
_, dst_binary_maxval = cv2.threshold(src, 0, 128, cv2.THRESH_BINARY)
_, dst_binary_fixed = cv2.threshold(src, 127, 255, cv2.THRESH_BINARY)
display_image(dst_binary, "Binary Thresholding")
display_image(dst_binary_maxval, "Binary Thresholding with maxVal 128")
display_image(dst_binary_fixed, "Binary Thresholding with threshold 127")



image = cv2.imread('Ferrari.jpg')
blue, green, red = cv2.split(image)
contours, _ = cv2.findContours(blue, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
image_contour_blue = cv2.drawContours(image.copy(), contours, -1, (0, 255, 0), 2)
display_image(image_contour_blue, "Contour on Blue Channel")
contours, _ = cv2.findContours(green, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
image_contour_green = cv2.drawContours(image.copy(), contours, -1, (0, 255, 0), 2)
display_image(image_contour_green, "Contour on Green Channel")
contours, _ = cv2.findContours(red, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
image_contour_red = cv2.drawContours(image.copy(), contours, -1, (0, 255, 0), 2)
display_image(image_contour_red, "Contour on Red Channel")


im = cv2.imread("Ferrari.jpg")
detector = cv2.SimpleBlobDetector_create()
keypoints = detector.detect(im)
im_with_keypoints = cv2.drawKeypoints(im, keypoints, np.array([]), (0, 0, 255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
display_image(im_with_keypoints, "Blob Detection")


***********************************image annotation************************************************
import cv2
import numpy as np
import matplotlib.pyplot as plt

-------------------------------------------------------------------

img = cv2.imread('image.jpg' )
plt.imshow(img)
plt.title('Original Image')
plt.show()


-------------------------------------------------------------------------


pointA = (20,20)
pointB = (200,20)
cv2.line(img, pointA, pointB, (255, 255, 0), thickness=3, lineType=cv2.LINE_AA)
plt.imshow(img)
plt.title("Image Line")
plt.show()


-----------------------------------------------------------------------------------


start_point =(10, 10)
end_point =(100,100)
cv2.rectangle(img, start_point, end_point, (225, 24, 255), thickness= 3, lineType=cv2.LINE_8) 
plt.imshow(img)
plt.title("Image Rectangle")
plt.show()


-----------------------------------------------------------------------------------


circle_center = (50,50)
radius =20
cv2.circle(img, circle_center, radius, (255, 225, 255), thickness=3, lineType=cv2.LINE_AA) 
plt.imshow(img)
plt.title("Image Circle")
plt.show()


------------------------------------------------------------------------------------


center = (120,70)
axis1 = (30,64)
axis2 = (25,75)
cv2.ellipse(img, center, axis1, 0, 0, 360, (255, 255, 0), thickness=3)
cv2.ellipse(img, center, axis2, 90, 0, 360, (0, 255, 255), thickness=3)
plt.imshow(img)
plt.title("Image Ellipse")
plt.show()


-------------------------------------------------------


***********************************image segmentation/grabcut***********************************


import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image = cv2.imread('images.jpg')
scale_percent = 50 
width = int(image.shape[1] * scale_percent / 100)
height = int(image.shape[0] * scale_percent / 100)
dim = (width, height)

resized_image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
resized_image_rgb = cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB)

# Create a mask initialized to zero (background)
mask = np.zeros(resized_image.shape[:2], np.uint8)

# Create background and foreground models
bgd_model = np.zeros((1, 65), np.float64)
fgd_model = np.zeros((1, 65), np.float64)

# Define a rectangle for the ROI (Region of Interest)
rect = (20, 10, resized_image.shape[1] - 20, resized_image.shape[0] - 20)

# Apply GrabCut algorithm with reduced iterations
num_iterations = 1
cv2.grabCut(resized_image, mask, rect, bgd_model, fgd_model, num_iterations, cv2.GC_INIT_WITH_RECT)

# Modify mask: Set the values for background (0) and foreground (1)
mask2 = np.where((mask == 2) | (mask == 0), 0, 1).astype('uint8')

# Create an output image
segmented_image = resized_image * mask2[:, :, np.newaxis]

# Resize segmented image back to original size
segmented_image = cv2.resize(segmented_image, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_LINEAR)
resized_image_rgb = cv2.resize(resized_image_rgb, (image.shape[1], image.shape[0]), interpolation=cv2.INTER_LINEAR)

# Display results
plt.figure(figsize=(12, 8))

plt.subplot(1, 3, 1)
plt.title("Original Image")
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title("Mask")
plt.imshow(mask, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title("Segmented Image")
plt.imshow(segmented_image)
plt.axis('off')

plt.tight_layout()
plt.show()



#############################################################################################################################################################################################################################################################################################################################################################################################################################################################################

                                DL




*************************************************housing*************************************************

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import models, layers, regularizers
import matplotlib.pyplot as plt


-------------------------------------------------------------


# Load dataset
data = pd.read_csv('boston_housing_prices.csv')

X = data.drop('MEDV', axis=1)
y = data['MEDV']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


--------------------------------------------------------------------


def build_enhanced_model():
    model = models.Sequential()
    model.add(layers.Input(shape=(X_train.shape[1],)))  # Input layer
    model.add(layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.001)))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(64, activation='relu', kernel_regularizer=regularizers.l2(0.001)))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(1))  # Output layer with no activation function
    model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])
    return model

model = build_enhanced_model()



-----------------------------------------------------------------------

model.fit(X_train, y_train, epochs=100, batch_size=16, validation_split=0.2)

------------------------------------------------------------------------



test_mse_score, test_mae_score = model.evaluate(X_test, y_test)
print(f"Mean Absolute Error on test data: {test_mae_score}")

------------------------------------------------------------------------------


predictions = model.predict(X_test)

plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual Prices', color='blue')
plt.plot(predictions, label='Predicted Prices', color='red')
plt.xlabel('Sample Index')
plt.ylabel('Price')
plt.title('Actual vs Predicted Prices')
plt.legend()
plt.show()
---------------------------------------------------------------




****************classify movie positive negative review***********************************************************************************************************




import numpy as np
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences

------------------------------------------------------------------------------

# Load the IMDB dataset
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)

# Pad sequences to ensure all reviews are the same length
X_train = pad_sequences(X_train, maxlen=200)
X_test = pad_sequences(X_test, maxlen=200)

# Convert to NumPy arrays
X_train = np.array(X_train)
y_train = np.array(y_train)
X_test = np.array(X_test)
y_test = np.array(y_test)

------------------------------------------------------------------------

from tensorflow.keras import models, layers

def build_model():
    model = models.Sequential()
    model.add(layers.Embedding(input_dim=10000, output_dim=128))  # Removed input_length
    model.add(layers.LSTM(64, dropout=0.2, recurrent_dropout=0.2))
    model.add(layers.Dense(1, activation='sigmoid'))

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

model = build_model()


-------------------------------------------------------------------------------

model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

--------------------------------------------------------------------------------

loss, accuracy = model.evaluate(X_test, y_test)
print(f'Accuracy: {accuracy * 100}')

--------------------------------------------------------------------------

import json

word_index = imdb.get_word_index()

def decode_review(encoded_review):
    reverse_word_index = {value: key for (key, value) in word_index.items()}
    decoded_review = ' '.join([reverse_word_index.get(i - 3, '?') for i in encoded_review])
    return decoded_review

# Decode the first 3 reviews in the test set
sample_reviews = [decode_review(X_test[i]) for i in range(3)]

# Preprocess reviews
def preprocess_reviews(reviews):
    sequences = imdb.get_word_index()
    indices = [[sequences.get(word, 0) for word in review.split()] for review in reviews]
    return pad_sequences(indices, maxlen=200)

preprocessed_reviews = preprocess_reviews(sample_reviews)

---------------------------------------------------------------------------

predictions = model.predict(preprocessed_reviews)

# Output the predictions
for review, prediction in zip(sample_reviews, predictions):
    sentiment = 'Positive' if prediction > 0.5 else 'Negative'
    print(f'Review: "{review}"\nPredicted Sentiment: {sentiment}\n')

-------------------------------------------------------------------------------





********************************image classification fashion item*****************************************

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# Load dataset
train_data = pd.read_csv('fashion-mnist_train.csv')
test_data = pd.read_csv('fashion-mnist_test.csv')

# Separate features and labels
X_train = train_data.iloc[:, 1:].values / 255.0
Y_train = train_data.iloc[:, 0].values
X_test = test_data.iloc[:, 1:].values / 255.0
Y_test = test_data.iloc[:, 0].values

# One-hot encode labels
Y_train = to_categorical(Y_train, 10)
Y_test = to_categorical(Y_test, 10)

# Reshape input data to match image format (28x28 pixels, 1 channel)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

---------------------------------------------------------------------------------

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])

model.summary()

-------------------------------------------------------------------------------------

history = model.fit(X_train, Y_train, epochs=10, batch_size=32, validation_data=(X_test, Y_test))

------------------------------------------------------------------------------------------------

loss, accuracy = model.evaluate(X_test, Y_test)
print(f"Test Set Accuracy: {accuracy * 100:.2f}%")

--------------------------------------------------------------------------------------------

class_labels = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
                'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

def predict_classes(X):
    predictions = model.predict(X)
    return np.argmax(predictions, axis=1)

predicted_classes = predict_classes(X_test)
actual_classes = np.argmax(Y_test, axis=1)

# Plot actual vs predicted images
def plot_images(images, actual, predicted, class_labels):
    plt.figure(figsize=(12, 12))
    for i in range(10):
        plt.subplot(5, 5, i+1)
        plt.imshow(images[i].reshape(28, 28), cmap='gray')
        plt.title(f"Actual: {class_labels[actual[i]]}\nPredicted: {class_labels[predicted[i]]}", fontsize=10)
        plt.axis('off')
        plt.subplots_adjust(hspace=0.5)  # Adjust the space between plots
    plt.show()


plot_images(X_test, actual_classes, predicted_classes, class_labels)

# Calculate accuracy
accuracy = np.sum(predicted_classes == actual_classes) / actual_classes.size
print(f"Accuracy: {accuracy * 100:.2f}%")

----------------------------------------------------------------------------------------------

